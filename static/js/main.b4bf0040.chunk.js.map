{"version":3,"sources":["App.module.css","redux/actions.js","redux/reducer.js","redux/store.js","redux/operations.js","Phonebook/ContactForm.js","redux/selectors.js","Phonebook/Filter.js","Phonebook/ContactList.js","App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","actions","contacts","createReducer","_","payload","state","action","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","devTools","process","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","delete","connect","onSubmit","operations","useState","setName","setNumber","nameInputId","uuidv4","numberInputId","reset","event","preventDefault","find","toLowerCase","alert","htmlFor","type","value","onChange","currentTarget","required","className","s","Btn","getIsLoading","getFilter","getFilteredContacts","createSelector","normalizedFilter","includes","e","target","delMethot","map","onClick","isLoading","fetchContacts","useEffect","App","Wrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4bf0040.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3VtKd\",\"Wrapper\":\"App_Wrapper__3nvOD\",\"Btn\":\"App_Btn__1sDKd\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactsRequest = createAction('fetchContactsRequest');\nconst fetchContactsSuccess = createAction('fetchContactsSuccess');\nconst fetchContactsError = createAction('fetchContactsError');\n\nconst addContactRequest = createAction('addContactRequest');\nconst addContactSuccess = createAction('addContactSuccess');\nconst addContactError = createAction('addContactError');\n\nconst deleteContactRequest = createAction('deleteContactRequest');\nconst deleteContactSuccess = createAction('deleteContactSucess');\nconst deleteContactError = createAction('deleteContactError');\n\n// const deleteContact = createAction('phoneBook/Delete');\nconst changeFilter = createAction('phoneBook/Filter');\n\n// const addContact = (name, number) => ({\n//   type: types.Add,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = (id) => ({\n//   type: types.Delete,\n//   payload: id,\n// })\n\n// const changeFilter = (value) => ({\n//   type: types.Filter,\n//   payload: value,\n// })\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './actions';\n\nconst {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} = actions;\n\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, action) => [action.payload, ...state],\n  [deleteContactSuccess]: (state, action) =>\n    state.filter(({ id }) => id !== action.payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// from FLUSH till REGISTER to avoid error in console\nimport {\n  // persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n// import storage from 'redux-persist/lib/storage';\nimport reducer from './reducer';\n\n// const persistConfig = {\n//   key: 'root',\n//   storage,\n// };\n\n// const persistedReducer = persistReducer(persistConfig, reducer);\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: reducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default store;\n","import axios from 'axios';\nimport actions from './actions';\n\naxios.defaults.baseURL = 'http://localhost:3030';\n\nconst fetchContacts = () => dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error)));\n};\n\nconst addContact = (name, number) => dispatch => {\n  const contact = {\n    name,\n    number,\n  };\n\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post('./contacts', contact)\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n    .catch(error => dispatch(actions.addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(actions.deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\n    .catch(error => dispatch(actions.deleteContactError(error)));\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { fetchContacts, addContact, deleteContact };\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from '../App.module.css';\nimport operations from '../redux/operations';\n\nconst ContactForm = ({ contacts, onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const changeNameInput = event => {\n    setName(event.currentTarget.value, ...name);\n  };\n\n  const changeNumberInput = event => {\n    setNumber(event.currentTarget.value);\n  };\n\n  const makeSubmit = event => {\n    event.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      reset();\n      return;\n    }\n    onSubmit(name, number);\n    reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={makeSubmit}>\n        <label htmlFor={nameInputId}>\n          Name\n          <input\n            id={nameInputId}\n            type=\"text\"\n            value={name}\n            onChange={changeNameInput}\n            required\n          />\n        </label>\n\n        <label htmlFor={numberInputId}>\n          Number\n          <input\n            id={numberInputId}\n            type=\"tel\"\n            value={number}\n            onChange={changeNumberInput}\n            required\n          />\n        </label>\n        <button className={s.Btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nconst mapStateToProps = state => {\n  const { contacts } = state;\n  return {\n    contacts: contacts,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(operations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getIsLoading = state => state.loading;\nexport const getFilter = state => state.filter;\nexport const getContacts = state => state.contacts;\nexport const getFilteredContacts = createSelector(\n  [getFilter, getContacts],\n  (filter, contacts) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizedFilter) ||\n        contact.number.includes(normalizedFilter),\n    );\n  },\n);\n","import { connect } from 'react-redux';\nimport actions from '../redux/actions';\nimport { getFilter } from '../redux/selectors';\n\nconst Filter = ({ value, onSubmit }) => {\n  return (\n    <>\n      <p>Find contacts by name </p>\n      <input type=\"text\" value={value} onChange={onSubmit} />\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: e => dispatch(actions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { connect } from 'react-redux';\nimport operations from '../redux/operations';\nimport { getFilteredContacts } from '../redux/selectors';\n\nconst ContactList = ({ contacts, delMethot }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}:{number}\n          <button onClick={() => delMethot(id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  delMethot: id => dispatch(operations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport operations from './redux/operations';\nimport ContactForm from './Phonebook/ContactForm';\nimport Filter from './Phonebook/Filter';\nimport ContactList from './Phonebook/ContactList';\nimport s from './App.module.css';\nimport { getIsLoading } from './redux/selectors';\n\nconst App = ({ isLoading, fetchContacts }) => {\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <div className={s.App}>\n      <div className={s.Wrapper}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        {isLoading ? <h1>Loading...</h1> : <h2>Contacts</h2>}\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}